
Lap_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000074  080045dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080045dc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010375  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002779  00000000  00000000  00030412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00032b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018bc1  00000000  00000000  00033a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010689  00000000  00000000  0004c629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008dcf5  00000000  00000000  0005ccb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ea9a7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000db8  00000000  00000000  000eaa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004080  00000000  00000000  000eb7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080044dc 	.word	0x080044dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080044dc 	.word	0x080044dc

0800014c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a10      	ldr	r2, [pc, #64]	; (800019c <HAL_UART_RxCpltCallback+0x50>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d119      	bne.n	8000192 <HAL_UART_RxCpltCallback+0x46>
//			HAL_UART_Transmit (& huart2 , & temps , 1 , 50) ;
//			HAL_UART_Receive_IT (& huart2 , & temps , 1) ;
		buffer[index_buffer++] = temp;
 800015e:	4b10      	ldr	r3, [pc, #64]	; (80001a0 <HAL_UART_RxCpltCallback+0x54>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	1c5a      	adds	r2, r3, #1
 8000164:	b2d1      	uxtb	r1, r2
 8000166:	4a0e      	ldr	r2, [pc, #56]	; (80001a0 <HAL_UART_RxCpltCallback+0x54>)
 8000168:	7011      	strb	r1, [r2, #0]
 800016a:	461a      	mov	r2, r3
 800016c:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <HAL_UART_RxCpltCallback+0x58>)
 800016e:	7819      	ldrb	r1, [r3, #0]
 8000170:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <HAL_UART_RxCpltCallback+0x5c>)
 8000172:	5499      	strb	r1, [r3, r2]
		if(index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <HAL_UART_RxCpltCallback+0x54>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b1e      	cmp	r3, #30
 800017a:	d102      	bne.n	8000182 <HAL_UART_RxCpltCallback+0x36>
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_UART_RxCpltCallback+0x54>)
 800017e:	2200      	movs	r2, #0
 8000180:	701a      	strb	r2, [r3, #0]
		flag_buffer = 1;
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <HAL_UART_RxCpltCallback+0x60>)
 8000184:	2201      	movs	r2, #1
 8000186:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	4906      	ldr	r1, [pc, #24]	; (80001a4 <HAL_UART_RxCpltCallback+0x58>)
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <HAL_UART_RxCpltCallback+0x64>)
 800018e:	f003 f8e0 	bl	8003352 <HAL_UART_Receive_IT>

	}
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40004400 	.word	0x40004400
 80001a0:	20000091 	.word	0x20000091
 80001a4:	20000090 	.word	0x20000090
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	20000092 	.word	0x20000092
 80001b0:	2000016c 	.word	0x2000016c

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 fc7a 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f82a 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f982 	bl	80004c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001c4:	f000 f87e 	bl	80002c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80001c8:	f000 f8ba 	bl	8000340 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001cc:	f000 f952 	bl	8000474 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001d0:	480b      	ldr	r0, [pc, #44]	; (8000200 <main+0x4c>)
 80001d2:	f000 fda7 	bl	8000d24 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80001d6:	480b      	ldr	r0, [pc, #44]	; (8000204 <main+0x50>)
 80001d8:	f002 f95a 	bl	8002490 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	490a      	ldr	r1, [pc, #40]	; (8000208 <main+0x54>)
 80001e0:	480a      	ldr	r0, [pc, #40]	; (800020c <main+0x58>)
 80001e2:	f003 f8b6 	bl	8003352 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(flag_buffer == 1){
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0x5c>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d104      	bne.n	80001f8 <main+0x44>
		  parser_fsm();
 80001ee:	f000 f9af 	bl	8000550 <parser_fsm>
		  flag_buffer = 0;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <main+0x5c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	701a      	strb	r2, [r3, #0]
	  }
	  uart_fsm();
 80001f8:	f000 fbc2 	bl	8000980 <uart_fsm>
	  if(flag_buffer == 1){
 80001fc:	e7f3      	b.n	80001e6 <main+0x32>
 80001fe:	bf00      	nop
 8000200:	2000013c 	.word	0x2000013c
 8000204:	200000f4 	.word	0x200000f4
 8000208:	20000090 	.word	0x20000090
 800020c:	2000016c 	.word	0x2000016c
 8000210:	20000092 	.word	0x20000092

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b094      	sub	sp, #80	; 0x50
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fd18 	bl	8003c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000254:	2300      	movs	r3, #0
 8000256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000258:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fbf4 	bl	8001a50 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800026e:	f000 f969 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fe5e 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800029a:	f000 f953 	bl	8000544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800029e:	2302      	movs	r3, #2
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 ffea 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002b6:	f000 f945 	bl	8000544 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3750      	adds	r7, #80	; 0x50
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_ADC1_Init+0x74>)
 80002d6:	4a19      	ldr	r2, [pc, #100]	; (800033c <MX_ADC1_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_ADC1_Init+0x74>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_ADC1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_ADC1_Init+0x74>)
 80002ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_ADC1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <MX_ADC1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <MX_ADC1_Init+0x74>)
 8000302:	f000 fc37 	bl	8000b74 <HAL_ADC_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f91a 	bl	8000544 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000314:	2301      	movs	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_ADC1_Init+0x74>)
 8000322:	f000 fe8f 	bl	8001044 <HAL_ADC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800032c:	f000 f90a 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000013c 	.word	0x2000013c
 800033c:	40012400 	.word	0x40012400

08000340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b092      	sub	sp, #72	; 0x48
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800037e:	4b3b      	ldr	r3, [pc, #236]	; (800046c <MX_TIM3_Init+0x12c>)
 8000380:	4a3b      	ldr	r2, [pc, #236]	; (8000470 <MX_TIM3_Init+0x130>)
 8000382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000384:	4b39      	ldr	r3, [pc, #228]	; (800046c <MX_TIM3_Init+0x12c>)
 8000386:	223f      	movs	r2, #63	; 0x3f
 8000388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038a:	4b38      	ldr	r3, [pc, #224]	; (800046c <MX_TIM3_Init+0x12c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000390:	4b36      	ldr	r3, [pc, #216]	; (800046c <MX_TIM3_Init+0x12c>)
 8000392:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <MX_TIM3_Init+0x12c>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039e:	4b33      	ldr	r3, [pc, #204]	; (800046c <MX_TIM3_Init+0x12c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003a4:	4831      	ldr	r0, [pc, #196]	; (800046c <MX_TIM3_Init+0x12c>)
 80003a6:	f002 f823 	bl	80023f0 <HAL_TIM_Base_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80003b0:	f000 f8c8 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003be:	4619      	mov	r1, r3
 80003c0:	482a      	ldr	r0, [pc, #168]	; (800046c <MX_TIM3_Init+0x12c>)
 80003c2:	f002 fa4d 	bl	8002860 <HAL_TIM_ConfigClockSource>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80003cc:	f000 f8ba 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80003d0:	4826      	ldr	r0, [pc, #152]	; (800046c <MX_TIM3_Init+0x12c>)
 80003d2:	f002 f8a9 	bl	8002528 <HAL_TIM_OC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80003dc:	f000 f8b2 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80003e0:	4822      	ldr	r0, [pc, #136]	; (800046c <MX_TIM3_Init+0x12c>)
 80003e2:	f002 f8f9 	bl	80025d8 <HAL_TIM_IC_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80003ec:	f000 f8aa 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003fc:	4619      	mov	r1, r3
 80003fe:	481b      	ldr	r0, [pc, #108]	; (800046c <MX_TIM3_Init+0x12c>)
 8000400:	f002 fe70 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800040a:	f000 f89b 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <MX_TIM3_Init+0x12c>)
 8000428:	f002 f92e 	bl	8002688 <HAL_TIM_OC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000432:	f000 f887 	bl	8000544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800043a:	2301      	movs	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2208      	movs	r2, #8
 800044a:	4619      	mov	r1, r3
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <MX_TIM3_Init+0x12c>)
 800044e:	f002 f973 	bl	8002738 <HAL_TIM_IC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000458:	f000 f874 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <MX_TIM3_Init+0x12c>)
 800045e:	f000 f993 	bl	8000788 <HAL_TIM_MspPostInit>

}
 8000462:	bf00      	nop
 8000464:	3748      	adds	r7, #72	; 0x48
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000f4 	.word	0x200000f4
 8000470:	40000400 	.word	0x40000400

08000474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <MX_USART2_UART_Init+0x50>)
 800047c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 8000480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_USART2_UART_Init+0x4c>)
 80004ac:	f002 fe72 	bl	8003194 <HAL_UART_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004b6:	f000 f845 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000016c 	.word	0x2000016c
 80004c4:	40004400 	.word	0x40004400

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_GPIO_Init+0x74>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <MX_GPIO_Init+0x74>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_GPIO_Init+0x74>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_GPIO_Init+0x74>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <MX_GPIO_Init+0x74>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_GPIO_Init+0x74>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0x78>)
 8000512:	f001 fa6b 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000516:	2320      	movs	r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	4619      	mov	r1, r3
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_GPIO_Init+0x78>)
 800052e:	f001 f8e3 	bl	80016f8 <HAL_GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <parser_fsm>:
#include <string.h>

uint8_t parser_index = 0;
uint8_t parser_status = INIT_COMMAND_PARSER;

void parser_fsm(){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	switch(parser_status){
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <parser_fsm+0x84>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d02c      	beq.n	80005b6 <parser_fsm+0x66>
 800055c:	2b02      	cmp	r3, #2
 800055e:	dc31      	bgt.n	80005c4 <parser_fsm+0x74>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <parser_fsm+0x1a>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d008      	beq.n	800057a <parser_fsm+0x2a>
		case END:
			command_flag = 1;
			parser_status = INIT_COMMAND_PARSER;
			break;
		default:
			break;
 8000568:	e02c      	b.n	80005c4 <parser_fsm+0x74>
			if(temp == '!' ) parser_status = START;
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <parser_fsm+0x88>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b21      	cmp	r3, #33	; 0x21
 8000570:	d12a      	bne.n	80005c8 <parser_fsm+0x78>
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <parser_fsm+0x84>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
			break ;
 8000578:	e026      	b.n	80005c8 <parser_fsm+0x78>
			if(temp == '#'){
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <parser_fsm+0x88>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b23      	cmp	r3, #35	; 0x23
 8000580:	d102      	bne.n	8000588 <parser_fsm+0x38>
				parser_status = END;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <parser_fsm+0x84>)
 8000584:	2202      	movs	r2, #2
 8000586:	701a      	strb	r2, [r3, #0]
			if(temp == '!'){
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <parser_fsm+0x88>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b21      	cmp	r3, #33	; 0x21
 800058e:	d106      	bne.n	800059e <parser_fsm+0x4e>
				parser_status = START;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <parser_fsm+0x84>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
				command_data[0] = '\0';
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <parser_fsm+0x8c>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
			break;
 800059c:	e015      	b.n	80005ca <parser_fsm+0x7a>
				command_data[parser_index++] = temp;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <parser_fsm+0x90>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	b2d1      	uxtb	r1, r2
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <parser_fsm+0x90>)
 80005a8:	7011      	strb	r1, [r2, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <parser_fsm+0x88>)
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <parser_fsm+0x8c>)
 80005b2:	5499      	strb	r1, [r3, r2]
			break;
 80005b4:	e009      	b.n	80005ca <parser_fsm+0x7a>
			command_flag = 1;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <parser_fsm+0x94>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
			parser_status = INIT_COMMAND_PARSER;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <parser_fsm+0x84>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
			break;
 80005c2:	e002      	b.n	80005ca <parser_fsm+0x7a>
			break;
 80005c4:	bf00      	nop
 80005c6:	e000      	b.n	80005ca <parser_fsm+0x7a>
			break ;
 80005c8:	bf00      	nop
	}
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000099 	.word	0x20000099
 80005d8:	20000090 	.word	0x20000090
 80005dc:	200000b4 	.word	0x200000b4
 80005e0:	20000098 	.word	0x20000098
 80005e4:	20000093 	.word	0x20000093

080005e8 <setTimer1>:

int timer11_counter=0;
int timer11_flag= 0;

void setTimer1(int duration)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CYCLE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <setTimer1+0x2c>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1092      	asrs	r2, r2, #2
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <setTimer1+0x30>)
 8000600:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <setTimer1+0x34>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	66666667 	.word	0x66666667
 8000618:	2000009c 	.word	0x2000009c
 800061c:	200000a0 	.word	0x200000a0

08000620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <HAL_ADC_MspInit+0x7c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d129      	bne.n	80006f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a16      	ldr	r2, [pc, #88]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a10      	ldr	r2, [pc, #64]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_ADC_MspInit+0x80>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	2303      	movs	r3, #3
 80006da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <HAL_ADC_MspInit+0x84>)
 80006e4:	f001 f808 	bl	80016f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2012      	movs	r0, #18
 80006ee:	f000 ff1c 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006f2:	2012      	movs	r0, #18
 80006f4:	f000 ff35 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40012400 	.word	0x40012400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800

0800070c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <HAL_TIM_Base_MspInit+0x70>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d123      	bne.n	8000774 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 0302 	and.w	r3, r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_TIM_Base_MspInit+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_TIM_Base_MspInit+0x78>)
 8000770:	f000 ffc2 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40000400 	.word	0x40000400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00

08000788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <HAL_TIM_MspPostInit+0x58>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d117      	bne.n	80007d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_TIM_MspPostInit+0x5c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <HAL_TIM_MspPostInit+0x5c>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_TIM_MspPostInit+0x5c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007d4:	f000 ff90 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40000400 	.word	0x40000400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <HAL_UART_MspInit+0x98>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d137      	bne.n	800087c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <HAL_UART_MspInit+0x9c>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_UART_MspInit+0x9c>)
 8000812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_UART_MspInit+0x9c>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0x9c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_UART_MspInit+0x9c>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0x9c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	2304      	movs	r3, #4
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <HAL_UART_MspInit+0xa0>)
 8000850:	f000 ff52 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000854:	2308      	movs	r3, #8
 8000856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <HAL_UART_MspInit+0xa0>)
 8000868:	f000 ff46 	bl	80016f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2026      	movs	r0, #38	; 0x26
 8000872:	f000 fe5a 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000876:	2026      	movs	r0, #38	; 0x26
 8000878:	f000 fe73 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40004400 	.word	0x40004400
 8000888:	40021000 	.word	0x40021000
 800088c:	40010800 	.word	0x40010800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f931 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <ADC1_2_IRQHandler+0x10>)
 80008e6:	f000 fad7 	bl	8000e98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000013c 	.word	0x2000013c

080008f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART2_IRQHandler+0x10>)
 80008fa:	f002 fd5b 	bl	80033b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000016c 	.word	0x2000016c

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f003 f964 	bl	8003c04 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20002800 	.word	0x20002800
 8000968:	00000400 	.word	0x00000400
 800096c:	200000a4 	.word	0x200000a4
 8000970:	200001e8 	.word	0x200001e8

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <uart_fsm>:

uint8_t uart_status = READY;
uint8_t ADC_value_memory = 0;
uint8_t str[30];

void uart_fsm(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	switch(uart_status){
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <uart_fsm+0xb4>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	3b03      	subs	r3, #3
 800098a:	2b03      	cmp	r3, #3
 800098c:	d84c      	bhi.n	8000a28 <uart_fsm+0xa8>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <uart_fsm+0x14>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009f1 	.word	0x080009f1
 800099c:	08000a29 	.word	0x08000a29
 80009a0:	08000a1f 	.word	0x08000a1f
		case READY:
			ADC_value = HAL_ADC_GetValue(&hadc1);
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <uart_fsm+0xb8>)
 80009a6:	f000 fa6b 	bl	8000e80 <HAL_ADC_GetValue>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <uart_fsm+0xbc>)
 80009ae:	6013      	str	r3, [r2, #0]
			if(command_flag == 1 && command_data == "RST"){
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <uart_fsm+0xc0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10b      	bne.n	80009d0 <uart_fsm+0x50>
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <uart_fsm+0xc4>)
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <uart_fsm+0xc8>)
 80009bc:	429a      	cmp	r2, r3
 80009be:	d107      	bne.n	80009d0 <uart_fsm+0x50>
				uart_status = SENDING;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <uart_fsm+0xb4>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	701a      	strb	r2, [r3, #0]
				ADC_value_memory = ADC_value;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <uart_fsm+0xbc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <uart_fsm+0xcc>)
 80009ce:	701a      	strb	r2, [r3, #0]
			}
			if(command_flag == 1 && command_data == "OK"){
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <uart_fsm+0xc0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d129      	bne.n	8000a2c <uart_fsm+0xac>
 80009d8:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <uart_fsm+0xc4>)
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <uart_fsm+0xd0>)
 80009dc:	429a      	cmp	r2, r3
 80009de:	d125      	bne.n	8000a2c <uart_fsm+0xac>
				uart_status = COMPLETE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <uart_fsm+0xb4>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	701a      	strb	r2, [r3, #0]
				setTimer1(time_wating);
 80009e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ea:	f7ff fdfd 	bl	80005e8 <setTimer1>
			}
			break;
 80009ee:	e01d      	b.n	8000a2c <uart_fsm+0xac>
		case SENDING:
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80009f0:	2120      	movs	r1, #32
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <uart_fsm+0xd4>)
 80009f4:	f001 f812 	bl	8001a1c <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart2, str, sprintf(str, "!ADC = ", ADC_value), 1000);
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <uart_fsm+0xbc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4916      	ldr	r1, [pc, #88]	; (8000a58 <uart_fsm+0xd8>)
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <uart_fsm+0xdc>)
 8000a02:	f003 f931 	bl	8003c68 <siprintf>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	4913      	ldr	r1, [pc, #76]	; (8000a5c <uart_fsm+0xdc>)
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <uart_fsm+0xe0>)
 8000a12:	f002 fc0c 	bl	800322e <HAL_UART_Transmit>
			uart_status = WATING_VERITIFIED;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <uart_fsm+0xb4>)
 8000a18:	2205      	movs	r2, #5
 8000a1a:	701a      	strb	r2, [r3, #0]
			break;
 8000a1c:	e007      	b.n	8000a2e <uart_fsm+0xae>
		case WATING_VERITIFIED:
			break;
		case COMPLETE:
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a1e:	2120      	movs	r1, #32
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <uart_fsm+0xd4>)
 8000a22:	f000 fffb 	bl	8001a1c <HAL_GPIO_TogglePin>
			break;
 8000a26:	e002      	b.n	8000a2e <uart_fsm+0xae>
		default:
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <uart_fsm+0xae>
			break;
 8000a2c:	bf00      	nop
	}
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000004 	.word	0x20000004
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	20000094 	.word	0x20000094
 8000a40:	20000093 	.word	0x20000093
 8000a44:	200000b4 	.word	0x200000b4
 8000a48:	080044f4 	.word	0x080044f4
 8000a4c:	200000a8 	.word	0x200000a8
 8000a50:	080044f8 	.word	0x080044f8
 8000a54:	40010800 	.word	0x40010800
 8000a58:	080044fc 	.word	0x080044fc
 8000a5c:	200001b0 	.word	0x200001b0
 8000a60:	2000016c 	.word	0x2000016c

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8a:	f7ff ff73 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f003 f8bf 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fb8f 	bl	80001b4 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa0:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8000aa4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000aa8:	200001e4 	.word	0x200001e4

08000aac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <CAN1_RX1_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 fd27 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fda8 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fd3f 	bl	800157e <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 fd07 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	200001d0 	.word	0x200001d0

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200001d0 	.word	0x200001d0

08000b74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0be      	b.n	8000d14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fd66 	bl	8000684 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fb95 	bl	80012e8 <ADC_ConversionStop_Disable>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8099 	bne.w	8000d02 <HAL_ADC_Init+0x18e>
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8095 	bne.w	8000d02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000be0:	f023 0302 	bic.w	r3, r3, #2
 8000be4:	f043 0202 	orr.w	r2, r3, #2
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7b1b      	ldrb	r3, [r3, #12]
 8000bfa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bfc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c0c:	d003      	beq.n	8000c16 <HAL_ADC_Init+0xa2>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d102      	bne.n	8000c1c <HAL_ADC_Init+0xa8>
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	e000      	b.n	8000c1e <HAL_ADC_Init+0xaa>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7d1b      	ldrb	r3, [r3, #20]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d119      	bne.n	8000c60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7b1b      	ldrb	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d109      	bne.n	8000c48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	035a      	lsls	r2, r3, #13
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e00b      	b.n	8000c60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	f043 0220 	orr.w	r2, r3, #32
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	f043 0201 	orr.w	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <HAL_ADC_Init+0x1a8>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c90:	d003      	beq.n	8000c9a <HAL_ADC_Init+0x126>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d104      	bne.n	8000ca4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	051b      	lsls	r3, r3, #20
 8000ca2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_ADC_Init+0x1ac>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f023 0303 	bic.w	r3, r3, #3
 8000cd6:	f043 0201 	orr.w	r2, r3, #1
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cde:	e018      	b.n	8000d12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	f023 0312 	bic.w	r3, r3, #18
 8000ce8:	f043 0210 	orr.w	r2, r3, #16
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	f043 0201 	orr.w	r2, r3, #1
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d00:	e007      	b.n	8000d12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	f043 0210 	orr.w	r2, r3, #16
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d20:	ff1f0efe 	.word	0xff1f0efe

08000d24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_ADC_Start+0x1a>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e098      	b.n	8000e70 <HAL_ADC_Start+0x14c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 fa74 	bl	8001234 <ADC_Enable>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8087 	bne.w	8000e66 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a41      	ldr	r2, [pc, #260]	; (8000e78 <HAL_ADC_Start+0x154>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d105      	bne.n	8000d82 <HAL_ADC_Start+0x5e>
 8000d76:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <HAL_ADC_Start+0x158>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d115      	bne.n	8000dae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d026      	beq.n	8000dea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000da4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dac:	e01d      	b.n	8000dea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <HAL_ADC_Start+0x158>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d004      	beq.n	8000dce <HAL_ADC_Start+0xaa>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a2b      	ldr	r2, [pc, #172]	; (8000e78 <HAL_ADC_Start+0x154>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_ADC_Start+0xc6>
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_ADC_Start+0x158>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000de2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	f023 0206 	bic.w	r2, r3, #6
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e02:	e002      	b.n	8000e0a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f06f 0202 	mvn.w	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e2a:	d113      	bne.n	8000e54 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_ADC_Start+0x154>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d105      	bne.n	8000e42 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_Start+0x158>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	e00c      	b.n	8000e6e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	e003      	b.n	8000e6e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40012800 	.word	0x40012800
 8000e7c:	40012400 	.word	0x40012400

08000e80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b20      	cmp	r3, #32
 8000eac:	d140      	bne.n	8000f30 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d139      	bne.n	8000f30 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ede:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ee2:	d11d      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d119      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0220 	bic.w	r2, r2, #32
 8000efa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f87c 	bl	800101e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f06f 0212 	mvn.w	r2, #18
 8000f2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	2b80      	cmp	r3, #128	; 0x80
 8000f3c:	d14f      	bne.n	8000fde <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d148      	bne.n	8000fde <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f6e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f72:	d012      	beq.n	8000f9a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d125      	bne.n	8000fce <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f90:	d11d      	bne.n	8000fce <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d119      	bne.n	8000fce <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d105      	bne.n	8000fce <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f9cb 	bl	800136a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f06f 020c 	mvn.w	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe8:	2b40      	cmp	r3, #64	; 0x40
 8000fea:	d114      	bne.n	8001016 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10d      	bne.n	8001016 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f812 	bl	8001030 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f06f 0201 	mvn.w	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x20>
 8001060:	2302      	movs	r3, #2
 8001062:	e0dc      	b.n	800121e <HAL_ADC_ConfigChannel+0x1da>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b06      	cmp	r3, #6
 8001072:	d81c      	bhi.n	80010ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3b05      	subs	r3, #5
 8001086:	221f      	movs	r2, #31
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	4019      	ands	r1, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b05      	subs	r3, #5
 80010a0:	fa00 f203 	lsl.w	r2, r0, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
 80010ac:	e03c      	b.n	8001128 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b0c      	cmp	r3, #12
 80010b4:	d81c      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3b23      	subs	r3, #35	; 0x23
 80010c8:	221f      	movs	r2, #31
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4019      	ands	r1, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b23      	subs	r3, #35	; 0x23
 80010e2:	fa00 f203 	lsl.w	r2, r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
 80010ee:	e01b      	b.n	8001128 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b41      	subs	r3, #65	; 0x41
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	4019      	ands	r1, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b41      	subs	r3, #65	; 0x41
 800111c:	fa00 f203 	lsl.w	r2, r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d91c      	bls.n	800116a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68d9      	ldr	r1, [r3, #12]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	3b1e      	subs	r3, #30
 8001142:	2207      	movs	r2, #7
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4019      	ands	r1, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6898      	ldr	r0, [r3, #8]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	3b1e      	subs	r3, #30
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	e019      	b.n	800119e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6919      	ldr	r1, [r3, #16]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4019      	ands	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6898      	ldr	r0, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	fa00 f203 	lsl.w	r2, r0, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d003      	beq.n	80011ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d132      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_ADC_ConfigChannel+0x1e4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d125      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d126      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d11a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_ADC_ConfigChannel+0x1e8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <HAL_ADC_ConfigChannel+0x1ec>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9a      	lsrs	r2, r3, #18
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001202:	e007      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	f043 0220 	orr.w	r2, r3, #32
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40012400 	.word	0x40012400
 800122c:	20000000 	.word	0x20000000
 8001230:	431bde83 	.word	0x431bde83

08001234 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d040      	beq.n	80012d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <ADC_Enable+0xac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <ADC_Enable+0xb0>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001270:	e002      	b.n	8001278 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127e:	f7ff fc6f 	bl	8000b60 <HAL_GetTick>
 8001282:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001284:	e01f      	b.n	80012c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001286:	f7ff fc6b 	bl	8000b60 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d918      	bls.n	80012c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d011      	beq.n	80012c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e007      	b.n	80012d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1d8      	bne.n	8001286 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d12e      	bne.n	8001360 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001312:	f7ff fc25 	bl	8000b60 <HAL_GetTick>
 8001316:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001318:	e01b      	b.n	8001352 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800131a:	f7ff fc21 	bl	8000b60 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d914      	bls.n	8001352 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10d      	bne.n	8001352 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f043 0210 	orr.w	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e007      	b.n	8001362 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d0dc      	beq.n	800131a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff2d 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff42 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff35 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d008      	beq.n	80015be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e020      	b.n	8001600 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 020e 	bic.w	r2, r2, #14
 80015cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
	...

0800160c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800161e:	2b02      	cmp	r3, #2
 8001620:	d005      	beq.n	800162e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e051      	b.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Abort_IT+0xd0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d029      	beq.n	80016ac <HAL_DMA_Abort_IT+0xa0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_DMA_Abort_IT+0xd4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d022      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x9c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_DMA_Abort_IT+0xd8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d01a      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x96>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_DMA_Abort_IT+0xdc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d012      	beq.n	800169c <HAL_DMA_Abort_IT+0x90>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_DMA_Abort_IT+0xe0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00a      	beq.n	8001696 <HAL_DMA_Abort_IT+0x8a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_DMA_Abort_IT+0xe4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d102      	bne.n	8001690 <HAL_DMA_Abort_IT+0x84>
 800168a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800168e:	e00e      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	e00b      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	e008      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	e005      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	e002      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016a8:	2310      	movs	r3, #16
 80016aa:	e000      	b.n	80016ae <HAL_DMA_Abort_IT+0xa2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_DMA_Abort_IT+0xe8>)
 80016b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    } 
  }
  return status;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020008 	.word	0x40020008
 80016e0:	4002001c 	.word	0x4002001c
 80016e4:	40020030 	.word	0x40020030
 80016e8:	40020044 	.word	0x40020044
 80016ec:	40020058 	.word	0x40020058
 80016f0:	4002006c 	.word	0x4002006c
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e148      	b.n	800199e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8137 	bne.w	8001998 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4aa3      	ldr	r2, [pc, #652]	; (80019bc <HAL_GPIO_Init+0x2c4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d05e      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001734:	4aa1      	ldr	r2, [pc, #644]	; (80019bc <HAL_GPIO_Init+0x2c4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d875      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800173a:	4aa1      	ldr	r2, [pc, #644]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d058      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001740:	4a9f      	ldr	r2, [pc, #636]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d86f      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001746:	4a9f      	ldr	r2, [pc, #636]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d052      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 800174c:	4a9d      	ldr	r2, [pc, #628]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d869      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001752:	4a9d      	ldr	r2, [pc, #628]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04c      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001758:	4a9b      	ldr	r2, [pc, #620]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d863      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800175e:	4a9b      	ldr	r2, [pc, #620]	; (80019cc <HAL_GPIO_Init+0x2d4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d046      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001764:	4a99      	ldr	r2, [pc, #612]	; (80019cc <HAL_GPIO_Init+0x2d4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d85d      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d82a      	bhi.n	80017c4 <HAL_GPIO_Init+0xcc>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d859      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_GPIO_Init+0x80>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017df 	.word	0x080017df
 8001784:	08001821 	.word	0x08001821
 8001788:	08001827 	.word	0x08001827
 800178c:	08001827 	.word	0x08001827
 8001790:	08001827 	.word	0x08001827
 8001794:	08001827 	.word	0x08001827
 8001798:	08001827 	.word	0x08001827
 800179c:	08001827 	.word	0x08001827
 80017a0:	08001827 	.word	0x08001827
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001827 	.word	0x08001827
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017e9 	.word	0x080017e9
 80017c4:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <HAL_GPIO_Init+0x2d8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e02c      	b.n	8001826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e029      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	3304      	adds	r3, #4
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e024      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3308      	adds	r3, #8
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e01f      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e01a      	b.n	8001828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fa:	2304      	movs	r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e013      	b.n	8001828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	611a      	str	r2, [r3, #16]
          break;
 8001812:	e009      	b.n	8001828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	615a      	str	r2, [r3, #20]
          break;
 800181e:	e003      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x130>
          break;
 8001826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d801      	bhi.n	8001832 <HAL_GPIO_Init+0x13a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_Init+0x13e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d802      	bhi.n	8001844 <HAL_GPIO_Init+0x14c>
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x152>
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	210f      	movs	r1, #15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8090 	beq.w	8001998 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001890:	4a51      	ldr	r2, [pc, #324]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_GPIO_Init+0x2e4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2e8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1dc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_GPIO_Init+0x2ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1d8>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	493b      	ldr	r1, [pc, #236]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4937      	ldr	r1, [pc, #220]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4933      	ldr	r1, [pc, #204]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800191c:	4013      	ands	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	492d      	ldr	r1, [pc, #180]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	4929      	ldr	r1, [pc, #164]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001944:	4013      	ands	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4923      	ldr	r1, [pc, #140]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	491f      	ldr	r1, [pc, #124]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800196c:	4013      	ands	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4919      	ldr	r1, [pc, #100]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4915      	ldr	r1, [pc, #84]	; (80019e8 <HAL_GPIO_Init+0x2f0>)
 8001994:	4013      	ands	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3301      	adds	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f47f aeaf 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	372c      	adds	r7, #44	; 0x2c
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10210000 	.word	0x10210000
 80019cc:	10120000 	.word	0x10120000
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e26c      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8087 	beq.w	8001b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7c:	4b8f      	ldr	r3, [pc, #572]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d112      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
 8001a88:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d10b      	bne.n	8001aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d06c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x12c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d168      	bne.n	8001b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e246      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x76>
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a7f      	ldr	r2, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e02e      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x98>
 8001ace:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0xbc>
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a71      	ldr	r2, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xd4>
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f818 	bl	8000b60 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f814 	bl	8000b60 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1fa      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe4>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f804 	bl	8000b60 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f800 	bl	8000b60 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1e6      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x10c>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d063      	beq.n	8001c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b96:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1ba      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4939      	ldr	r1, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e03a      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe ffb9 	bl	8000b60 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7fe ffb5 	bl	8000b60 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e19b      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4927      	ldr	r1, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe ff98 	bl	8000b60 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7fe ff94 	bl	8000b60 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e17a      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6c:	f7fe ff78 	bl	8000b60 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7fe ff74 	bl	8000b60 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e15a      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 fad8 	bl	8002248 <RCC_Delay>
 8001c98:	e01c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7fe ff5e 	bl	8000b60 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	e00f      	b.n	8001cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7fe ff5a 	bl	8000b60 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d908      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e140      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	42420000 	.word	0x42420000
 8001cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e9      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a6 	beq.w	8001e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b97      	ldr	r3, [pc, #604]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10d      	bne.n	8001d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b94      	ldr	r3, [pc, #592]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a93      	ldr	r2, [pc, #588]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b91      	ldr	r3, [pc, #580]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a8a      	ldr	r2, [pc, #552]	; (8001f48 <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ff1b 	bl	8000b60 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7fe ff17 	bl	8000b60 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0fd      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	4b81      	ldr	r3, [pc, #516]	; (8001f48 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x312>
 8001d54:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a7a      	ldr	r2, [pc, #488]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e02d      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x334>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	e01c      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x356>
 8001d8c:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a6c      	ldr	r2, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	4b6a      	ldr	r3, [pc, #424]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e00b      	b.n	8001dbe <HAL_RCC_OscConfig+0x36e>
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a66      	ldr	r2, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b64      	ldr	r3, [pc, #400]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a63      	ldr	r2, [pc, #396]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d015      	beq.n	8001df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7fe fecb 	bl	8000b60 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe fec7 	bl	8000b60 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0ab      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ee      	beq.n	8001dce <HAL_RCC_OscConfig+0x37e>
 8001df0:	e014      	b.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7fe feb5 	bl	8000b60 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe feb1 	bl	8000b60 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e095      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d105      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e22:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8081 	beq.w	8001f3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d061      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d146      	bne.n	8001eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_OscConfig+0x4fc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fe85 	bl	8000b60 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe fe81 	bl	8000b60 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e067      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	492d      	ldr	r1, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a19      	ldr	r1, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	4927      	ldr	r1, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x4fc>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fe55 	bl	8000b60 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fe51 	bl	8000b60 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e037      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x46a>
 8001ed8:	e02f      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <HAL_RCC_OscConfig+0x4fc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe3e 	bl	8000b60 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe fe3a 	bl	8000b60 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e020      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x498>
 8001f06:	e018      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e013      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	42420060 	.word	0x42420060

08001f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d0      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4965      	ldr	r1, [pc, #404]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d040      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d115      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e073      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4936      	ldr	r1, [pc, #216]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7fe fd8e 	bl	8000b60 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe fd8a 	bl	8000b60 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e053      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d210      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4922      	ldr	r1, [pc, #136]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x1cc>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_ClockConfig+0x1d0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fcec 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000
 8002114:	40021000 	.word	0x40021000
 8002118:	08004514 	.word	0x08004514
 800211c:	20000000 	.word	0x20000000
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b490      	push	{r4, r7}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800212c:	1d3c      	adds	r4, r7, #4
 800212e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002134:	f240 2301 	movw	r3, #513	; 0x201
 8002138:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x40>
 800215e:	2b08      	cmp	r3, #8
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x46>
 8002162:	e02d      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002166:	623b      	str	r3, [r7, #32]
      break;
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	0c9b      	lsrs	r3, r3, #18
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002176:	4413      	add	r3, r2
 8002178:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800217c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c5b      	lsrs	r3, r3, #17
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002196:	4413      	add	r3, r2
 8002198:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800219c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	fb02 f203 	mul.w	r2, r2, r3
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	e004      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b4:	fb02 f303 	mul.w	r3, r2, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	623b      	str	r3, [r7, #32]
      break;
 80021be:	e002      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	623b      	str	r3, [r7, #32]
      break;
 80021c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c6:	6a3b      	ldr	r3, [r7, #32]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc90      	pop	{r4, r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	08004504 	.word	0x08004504
 80021d8:	40021000 	.word	0x40021000
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff2 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08004524 	.word	0x08004524

08002220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002224:	f7ff ffde 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0adb      	lsrs	r3, r3, #11
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08004524 	.word	0x08004524

08002248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <RCC_Delay+0x34>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <RCC_Delay+0x38>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0a5b      	lsrs	r3, r3, #9
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002264:	bf00      	nop
  }
  while (Delay --);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	60fa      	str	r2, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <RCC_Delay+0x1c>
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000000 	.word	0x20000000
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d07d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d118      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e4:	f7fe fc3c 	bl	8000b60 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	e008      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7fe fc38 	bl	8000b60 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06d      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02e      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d027      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d014      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fc07 	bl	8000b60 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fc03 	bl	8000b60 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e036      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4917      	ldr	r1, [pc, #92]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	4313      	orrs	r3, r2
 8002388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	490b      	ldr	r1, [pc, #44]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42420440 	.word	0x42420440

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e041      	b.n	8002486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe f978 	bl	800070c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 fada 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e035      	b.n	8002514 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_TIM_Base_Start_IT+0x90>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d004      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_TIM_Base_Start_IT+0x94>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400

08002528 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e041      	b.n	80025be <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f839 	bl	80025c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fa3e 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e041      	b.n	800266e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f839 	bl	8002676 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 f9e6 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e046      	b.n	8002730 <HAL_TIM_OC_ConfigChannel+0xa8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b0c      	cmp	r3, #12
 80026ae:	d839      	bhi.n	8002724 <HAL_TIM_OC_ConfigChannel+0x9c>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	08002725 	.word	0x08002725
 80026c0:	08002725 	.word	0x08002725
 80026c4:	08002725 	.word	0x08002725
 80026c8:	080026fb 	.word	0x080026fb
 80026cc:	08002725 	.word	0x08002725
 80026d0:	08002725 	.word	0x08002725
 80026d4:	08002725 	.word	0x08002725
 80026d8:	08002709 	.word	0x08002709
 80026dc:	08002725 	.word	0x08002725
 80026e0:	08002725 	.word	0x08002725
 80026e4:	08002725 	.word	0x08002725
 80026e8:	08002717 	.word	0x08002717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f9d0 	bl	8002a98 <TIM_OC1_SetConfig>
      break;
 80026f8:	e015      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fa2f 	bl	8002b64 <TIM_OC2_SetConfig>
      break;
 8002706:	e00e      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fa92 	bl	8002c38 <TIM_OC3_SetConfig>
      break;
 8002714:	e007      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 faf5 	bl	8002d0c <TIM_OC4_SetConfig>
      break;
 8002722:	e000      	b.n	8002726 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_TIM_IC_ConfigChannel+0x1a>
 800274e:	2302      	movs	r3, #2
 8002750:	e082      	b.n	8002858 <HAL_TIM_IC_ConfigChannel+0x120>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f000 fb1a 	bl	8002da8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 020c 	bic.w	r2, r2, #12
 8002782:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	e05a      	b.n	800284e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d11c      	bne.n	80027d8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f000 fb7d 	bl	8002eac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6999      	ldr	r1, [r3, #24]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	021a      	lsls	r2, r3, #8
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	e03a      	b.n	800284e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11b      	bne.n	8002816 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f000 fbc8 	bl	8002f82 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 020c 	bic.w	r2, r2, #12
 8002800:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69d9      	ldr	r1, [r3, #28]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	61da      	str	r2, [r3, #28]
 8002814:	e01b      	b.n	800284e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f000 fbe7 	bl	8002ff8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002838:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69d9      	ldr	r1, [r3, #28]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	021a      	lsls	r2, r3, #8
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_TIM_ConfigClockSource+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e0b3      	b.n	80029e0 <HAL_TIM_ConfigClockSource+0x180>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800289e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b0:	d03e      	beq.n	8002930 <HAL_TIM_ConfigClockSource+0xd0>
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	f200 8087 	bhi.w	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	f000 8085 	beq.w	80029cc <HAL_TIM_ConfigClockSource+0x16c>
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d87f      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d01a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0xa2>
 80028cc:	2b70      	cmp	r3, #112	; 0x70
 80028ce:	d87b      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d050      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x116>
 80028d4:	2b60      	cmp	r3, #96	; 0x60
 80028d6:	d877      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028d8:	2b50      	cmp	r3, #80	; 0x50
 80028da:	d03c      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0xf6>
 80028dc:	2b50      	cmp	r3, #80	; 0x50
 80028de:	d873      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d058      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x136>
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d86f      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028e8:	2b30      	cmp	r3, #48	; 0x30
 80028ea:	d064      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d86b      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d060      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d867      	bhi.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05c      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d05a      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002900:	e062      	b.n	80029c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f000 fbc7 	bl	80030a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002924:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	609a      	str	r2, [r3, #8]
      break;
 800292e:	e04e      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f000 fbb0 	bl	80030a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002952:	609a      	str	r2, [r3, #8]
      break;
 8002954:	e03b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 fa74 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2150      	movs	r1, #80	; 0x50
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fb7e 	bl	8003070 <TIM_ITRx_SetConfig>
      break;
 8002974:	e02b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 face 	bl	8002f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2160      	movs	r1, #96	; 0x60
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb6e 	bl	8003070 <TIM_ITRx_SetConfig>
      break;
 8002994:	e01b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fa54 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb5e 	bl	8003070 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f000 fb55 	bl	8003070 <TIM_ITRx_SetConfig>
        break;
 80029c6:	e002      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <TIM_Base_SetConfig+0xa8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x28>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x28>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <TIM_Base_SetConfig+0xac>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <TIM_Base_SetConfig+0xa8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0x52>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0x52>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <TIM_Base_SetConfig+0xac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <TIM_Base_SetConfig+0xa8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d103      	bne.n	8002a80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	615a      	str	r2, [r3, #20]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400

08002a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <TIM_OC1_SetConfig+0xc8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10c      	bne.n	8002b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0308 	bic.w	r3, r3, #8
 8002afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <TIM_OC1_SetConfig+0xc8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40012c00 	.word	0x40012c00

08002b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f023 0210 	bic.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0320 	bic.w	r3, r3, #32
 8002bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <TIM_OC2_SetConfig+0xd0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10d      	bne.n	8002be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <TIM_OC2_SetConfig+0xd0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d113      	bne.n	8002c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00

08002c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <TIM_OC3_SetConfig+0xd0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10d      	bne.n	8002cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <TIM_OC3_SetConfig+0xd0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	621a      	str	r2, [r3, #32]
}
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40012c00 	.word	0x40012c00

08002d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <TIM_OC4_SetConfig+0x98>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d109      	bne.n	8002d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00

08002da8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <TIM_TI1_SetConfig+0xa0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_TI1_SetConfig+0x3e>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d003      	beq.n	8002de6 <TIM_TI1_SetConfig+0x3e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <TIM_TI1_SetConfig+0xa4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <TIM_TI1_SetConfig+0x42>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <TIM_TI1_SetConfig+0x44>
 8002dea:	2300      	movs	r3, #0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e003      	b.n	8002e0a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f023 030a 	bic.w	r3, r3, #10
 8002e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 030a 	and.w	r3, r3, #10
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	031b      	lsls	r3, r3, #12
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f023 0210 	bic.w	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003036:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	031b      	lsls	r3, r3, #12
 800303c:	b29b      	uxth	r3, r3
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	031b      	lsls	r3, r3, #12
 8003050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	f043 0307 	orr.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	021a      	lsls	r2, r3, #8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e041      	b.n	8003180 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d004      	beq.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10c      	bne.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400

08003194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03f      	b.n	8003226 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fb16 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fc85 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800320c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08a      	sub	sp, #40	; 0x28
 8003232:	af02      	add	r7, sp, #8
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	d17c      	bne.n	8003348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Transmit+0x2c>
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e075      	b.n	800334a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_UART_Transmit+0x3e>
 8003268:	2302      	movs	r3, #2
 800326a:	e06e      	b.n	800334a <HAL_UART_Transmit+0x11c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003282:	f7fd fc6d 	bl	8000b60 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Transmit+0x82>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032c0:	e02a      	b.n	8003318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fa38 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e036      	b.n	800334a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e007      	b.n	800330a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1cf      	bne.n	80032c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	; 0x40
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fa08 	bl	8003742 <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e006      	b.n	800334a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	d11d      	bne.n	80033a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_Receive_IT+0x26>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e016      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_UART_Receive_IT+0x38>
 8003386:	2302      	movs	r3, #2
 8003388:	e00f      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	461a      	mov	r2, r3
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa19 	bl	80037d6 <UART_Start_Receive_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_UART_IRQHandler+0x52>
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fac9 	bl	8003996 <UART_Receive_IT>
      return;
 8003404:	e17b      	b.n	80036fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80b1 	beq.w	8003570 <HAL_UART_IRQHandler+0x1bc>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_UART_IRQHandler+0x70>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80a6 	beq.w	8003570 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_UART_IRQHandler+0x90>
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_UART_IRQHandler+0xb0>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0202 	orr.w	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_UART_IRQHandler+0xd0>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00f      	beq.n	80034ae <HAL_UART_IRQHandler+0xfa>
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_UART_IRQHandler+0xee>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0208 	orr.w	r2, r3, #8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 811e 	beq.w	80036f4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_UART_IRQHandler+0x11e>
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fa62 	bl	8003996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_UART_IRQHandler+0x146>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d031      	beq.n	800355e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f9a4 	bl	8003848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d023      	beq.n	8003556 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4a76      	ldr	r2, [pc, #472]	; (8003704 <HAL_UART_IRQHandler+0x350>)
 800352c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f86a 	bl	800160c <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00e      	b.n	800356c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8e3 	bl	800371a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00a      	b.n	800356c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8df 	bl	800371a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e006      	b.n	800356c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8db 	bl	800371a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800356a:	e0c3      	b.n	80036f4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	bf00      	nop
    return;
 800356e:	e0c1      	b.n	80036f4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 80a1 	bne.w	80036bc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 809b 	beq.w	80036bc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8095 	beq.w	80036bc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04e      	beq.n	8003654 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8098 	beq.w	80036f8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035cc:	8a3a      	ldrh	r2, [r7, #16]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f080 8092 	bcs.w	80036f8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8a3a      	ldrh	r2, [r7, #16]
 80035d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d02b      	beq.n	800363c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003612:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0210 	bic.w	r2, r2, #16
 8003630:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd ffad 	bl	8001596 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003644:	b29b      	uxth	r3, r3
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f86d 	bl	800372c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003652:	e051      	b.n	80036f8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800365c:	b29b      	uxth	r3, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d047      	beq.n	80036fc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800366c:	8a7b      	ldrh	r3, [r7, #18]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d044      	beq.n	80036fc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003680:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0210 	bic.w	r2, r2, #16
 80036ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b0:	8a7b      	ldrh	r3, [r7, #18]
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f839 	bl	800372c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036ba:	e01f      	b.n	80036fc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_UART_IRQHandler+0x324>
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8f9 	bl	80038c8 <UART_Transmit_IT>
    return;
 80036d6:	e012      	b.n	80036fe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <HAL_UART_IRQHandler+0x34a>
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f93a 	bl	8003966 <UART_EndTransmit_IT>
    return;
 80036f2:	e004      	b.n	80036fe <HAL_UART_IRQHandler+0x34a>
    return;
 80036f4:	bf00      	nop
 80036f6:	e002      	b.n	80036fe <HAL_UART_IRQHandler+0x34a>
      return;
 80036f8:	bf00      	nop
 80036fa:	e000      	b.n	80036fe <HAL_UART_IRQHandler+0x34a>
      return;
 80036fc:	bf00      	nop
  }
}
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	080038a1 	.word	0x080038a1

08003708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	e02c      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d028      	beq.n	80037ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x30>
 8003762:	f7fd f9fd 	bl	8000b60 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d21d      	bcs.n	80037ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003780:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e00f      	b.n	80037ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d0c3      	beq.n	8003754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	4613      	mov	r3, r2
 80037e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2222      	movs	r2, #34	; 0x22
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800385e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0210 	bic.w	r2, r2, #16
 8003886:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff ff2d 	bl	800371a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d13e      	bne.n	800395a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d114      	bne.n	8003910 <UART_Transmit_IT+0x48>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d110      	bne.n	8003910 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003902:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]
 800390e:	e008      	b.n	8003922 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6211      	str	r1, [r2, #32]
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29b      	uxth	r3, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4619      	mov	r1, r3
 8003930:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003954:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff febe 	bl	8003708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	f040 8099 	bne.w	8003ade <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	d117      	bne.n	80039e6 <UART_Receive_IT+0x50>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
 80039e4:	e026      	b.n	8003a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d007      	beq.n	8003a0a <UART_Receive_IT+0x74>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <UART_Receive_IT+0x82>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e008      	b.n	8003a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4619      	mov	r1, r3
 8003a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d148      	bne.n	8003ada <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0220 	bic.w	r2, r2, #32
 8003a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d123      	bne.n	8003ad0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0210 	bic.w	r2, r2, #16
 8003a9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d10a      	bne.n	8003ac2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fe2f 	bl	800372c <HAL_UARTEx_RxEventCallback>
 8003ace:	e002      	b.n	8003ad6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fc fb3b 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e002      	b.n	8003ae0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b22:	f023 030c 	bic.w	r3, r3, #12
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <UART_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fb66 	bl	8002220 <HAL_RCC_GetPCLK2Freq>
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	e002      	b.n	8003b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe fb4e 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	0119      	lsls	r1, r3, #4
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <UART_SetConfig+0x118>)
 8003b96:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	; 0x32
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	4419      	add	r1, r3
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <UART_SetConfig+0x118>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2064      	movs	r0, #100	; 0x64
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <__errno>:
 8003c04:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <__errno+0x8>)
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000010 	.word	0x20000010

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	2600      	movs	r6, #0
 8003c14:	4d0c      	ldr	r5, [pc, #48]	; (8003c48 <__libc_init_array+0x38>)
 8003c16:	4c0d      	ldr	r4, [pc, #52]	; (8003c4c <__libc_init_array+0x3c>)
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	42a6      	cmp	r6, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	f000 fc5c 	bl	80044dc <_init>
 8003c24:	2600      	movs	r6, #0
 8003c26:	4d0a      	ldr	r5, [pc, #40]	; (8003c50 <__libc_init_array+0x40>)
 8003c28:	4c0a      	ldr	r4, [pc, #40]	; (8003c54 <__libc_init_array+0x44>)
 8003c2a:	1b64      	subs	r4, r4, r5
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	42a6      	cmp	r6, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c38:	4798      	blx	r3
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c42:	4798      	blx	r3
 8003c44:	3601      	adds	r6, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	08004560 	.word	0x08004560
 8003c4c:	08004560 	.word	0x08004560
 8003c50:	08004560 	.word	0x08004560
 8003c54:	08004564 	.word	0x08004564

08003c58 <memset>:
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4402      	add	r2, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <siprintf>:
 8003c68:	b40e      	push	{r1, r2, r3}
 8003c6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c6e:	b500      	push	{lr}
 8003c70:	b09c      	sub	sp, #112	; 0x70
 8003c72:	ab1d      	add	r3, sp, #116	; 0x74
 8003c74:	9002      	str	r0, [sp, #8]
 8003c76:	9006      	str	r0, [sp, #24]
 8003c78:	9107      	str	r1, [sp, #28]
 8003c7a:	9104      	str	r1, [sp, #16]
 8003c7c:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <siprintf+0x38>)
 8003c7e:	4909      	ldr	r1, [pc, #36]	; (8003ca4 <siprintf+0x3c>)
 8003c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c84:	9105      	str	r1, [sp, #20]
 8003c86:	6800      	ldr	r0, [r0, #0]
 8003c88:	a902      	add	r1, sp, #8
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	f000 f868 	bl	8003d60 <_svfiprintf_r>
 8003c90:	2200      	movs	r2, #0
 8003c92:	9b02      	ldr	r3, [sp, #8]
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	b01c      	add	sp, #112	; 0x70
 8003c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c9c:	b003      	add	sp, #12
 8003c9e:	4770      	bx	lr
 8003ca0:	20000010 	.word	0x20000010
 8003ca4:	ffff0208 	.word	0xffff0208

08003ca8 <__ssputs_r>:
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	688e      	ldr	r6, [r1, #8]
 8003cae:	4682      	mov	sl, r0
 8003cb0:	429e      	cmp	r6, r3
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4690      	mov	r8, r2
 8003cb6:	461f      	mov	r7, r3
 8003cb8:	d838      	bhi.n	8003d2c <__ssputs_r+0x84>
 8003cba:	898a      	ldrh	r2, [r1, #12]
 8003cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc0:	d032      	beq.n	8003d28 <__ssputs_r+0x80>
 8003cc2:	6825      	ldr	r5, [r4, #0]
 8003cc4:	6909      	ldr	r1, [r1, #16]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	eba5 0901 	sub.w	r9, r5, r1
 8003ccc:	6965      	ldr	r5, [r4, #20]
 8003cce:	444b      	add	r3, r9
 8003cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cd8:	106d      	asrs	r5, r5, #1
 8003cda:	429d      	cmp	r5, r3
 8003cdc:	bf38      	it	cc
 8003cde:	461d      	movcc	r5, r3
 8003ce0:	0553      	lsls	r3, r2, #21
 8003ce2:	d531      	bpl.n	8003d48 <__ssputs_r+0xa0>
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	f000 fb53 	bl	8004390 <_malloc_r>
 8003cea:	4606      	mov	r6, r0
 8003cec:	b950      	cbnz	r0, 8003d04 <__ssputs_r+0x5c>
 8003cee:	230c      	movs	r3, #12
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f8ca 3000 	str.w	r3, [sl]
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	464a      	mov	r2, r9
 8003d06:	6921      	ldr	r1, [r4, #16]
 8003d08:	f000 face 	bl	80042a8 <memcpy>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	6126      	str	r6, [r4, #16]
 8003d1a:	444e      	add	r6, r9
 8003d1c:	6026      	str	r6, [r4, #0]
 8003d1e:	463e      	mov	r6, r7
 8003d20:	6165      	str	r5, [r4, #20]
 8003d22:	eba5 0509 	sub.w	r5, r5, r9
 8003d26:	60a5      	str	r5, [r4, #8]
 8003d28:	42be      	cmp	r6, r7
 8003d2a:	d900      	bls.n	8003d2e <__ssputs_r+0x86>
 8003d2c:	463e      	mov	r6, r7
 8003d2e:	4632      	mov	r2, r6
 8003d30:	4641      	mov	r1, r8
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	f000 fac6 	bl	80042c4 <memmove>
 8003d38:	68a3      	ldr	r3, [r4, #8]
 8003d3a:	6822      	ldr	r2, [r4, #0]
 8003d3c:	1b9b      	subs	r3, r3, r6
 8003d3e:	4432      	add	r2, r6
 8003d40:	2000      	movs	r0, #0
 8003d42:	60a3      	str	r3, [r4, #8]
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	e7db      	b.n	8003d00 <__ssputs_r+0x58>
 8003d48:	462a      	mov	r2, r5
 8003d4a:	f000 fb7b 	bl	8004444 <_realloc_r>
 8003d4e:	4606      	mov	r6, r0
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d1e1      	bne.n	8003d18 <__ssputs_r+0x70>
 8003d54:	4650      	mov	r0, sl
 8003d56:	6921      	ldr	r1, [r4, #16]
 8003d58:	f000 face 	bl	80042f8 <_free_r>
 8003d5c:	e7c7      	b.n	8003cee <__ssputs_r+0x46>
	...

08003d60 <_svfiprintf_r>:
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	4698      	mov	r8, r3
 8003d66:	898b      	ldrh	r3, [r1, #12]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	460d      	mov	r5, r1
 8003d6e:	4614      	mov	r4, r2
 8003d70:	b09d      	sub	sp, #116	; 0x74
 8003d72:	d50e      	bpl.n	8003d92 <_svfiprintf_r+0x32>
 8003d74:	690b      	ldr	r3, [r1, #16]
 8003d76:	b963      	cbnz	r3, 8003d92 <_svfiprintf_r+0x32>
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	f000 fb09 	bl	8004390 <_malloc_r>
 8003d7e:	6028      	str	r0, [r5, #0]
 8003d80:	6128      	str	r0, [r5, #16]
 8003d82:	b920      	cbnz	r0, 8003d8e <_svfiprintf_r+0x2e>
 8003d84:	230c      	movs	r3, #12
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e0d1      	b.n	8003f32 <_svfiprintf_r+0x1d2>
 8003d8e:	2340      	movs	r3, #64	; 0x40
 8003d90:	616b      	str	r3, [r5, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9309      	str	r3, [sp, #36]	; 0x24
 8003d96:	2320      	movs	r3, #32
 8003d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d9c:	2330      	movs	r3, #48	; 0x30
 8003d9e:	f04f 0901 	mov.w	r9, #1
 8003da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f4c <_svfiprintf_r+0x1ec>
 8003daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dae:	4623      	mov	r3, r4
 8003db0:	469a      	mov	sl, r3
 8003db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db6:	b10a      	cbz	r2, 8003dbc <_svfiprintf_r+0x5c>
 8003db8:	2a25      	cmp	r2, #37	; 0x25
 8003dba:	d1f9      	bne.n	8003db0 <_svfiprintf_r+0x50>
 8003dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc0:	d00b      	beq.n	8003dda <_svfiprintf_r+0x7a>
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f7ff ff6d 	bl	8003ca8 <__ssputs_r>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f000 80aa 	beq.w	8003f28 <_svfiprintf_r+0x1c8>
 8003dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd6:	445a      	add	r2, fp
 8003dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dda:	f89a 3000 	ldrb.w	r3, [sl]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a2 	beq.w	8003f28 <_svfiprintf_r+0x1c8>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dee:	f10a 0a01 	add.w	sl, sl, #1
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9307      	str	r3, [sp, #28]
 8003df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8003dfc:	4654      	mov	r4, sl
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e04:	4851      	ldr	r0, [pc, #324]	; (8003f4c <_svfiprintf_r+0x1ec>)
 8003e06:	f000 fa41 	bl	800428c <memchr>
 8003e0a:	9a04      	ldr	r2, [sp, #16]
 8003e0c:	b9d8      	cbnz	r0, 8003e46 <_svfiprintf_r+0xe6>
 8003e0e:	06d0      	lsls	r0, r2, #27
 8003e10:	bf44      	itt	mi
 8003e12:	2320      	movmi	r3, #32
 8003e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e18:	0711      	lsls	r1, r2, #28
 8003e1a:	bf44      	itt	mi
 8003e1c:	232b      	movmi	r3, #43	; 0x2b
 8003e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b2a      	cmp	r3, #42	; 0x2a
 8003e28:	d015      	beq.n	8003e56 <_svfiprintf_r+0xf6>
 8003e2a:	4654      	mov	r4, sl
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f04f 0c0a 	mov.w	ip, #10
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	4621      	mov	r1, r4
 8003e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e3a:	3b30      	subs	r3, #48	; 0x30
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	d94e      	bls.n	8003ede <_svfiprintf_r+0x17e>
 8003e40:	b1b0      	cbz	r0, 8003e70 <_svfiprintf_r+0x110>
 8003e42:	9207      	str	r2, [sp, #28]
 8003e44:	e014      	b.n	8003e70 <_svfiprintf_r+0x110>
 8003e46:	eba0 0308 	sub.w	r3, r0, r8
 8003e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	46a2      	mov	sl, r4
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	e7d2      	b.n	8003dfc <_svfiprintf_r+0x9c>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	9103      	str	r1, [sp, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfbb      	ittet	lt
 8003e62:	425b      	neglt	r3, r3
 8003e64:	f042 0202 	orrlt.w	r2, r2, #2
 8003e68:	9307      	strge	r3, [sp, #28]
 8003e6a:	9307      	strlt	r3, [sp, #28]
 8003e6c:	bfb8      	it	lt
 8003e6e:	9204      	strlt	r2, [sp, #16]
 8003e70:	7823      	ldrb	r3, [r4, #0]
 8003e72:	2b2e      	cmp	r3, #46	; 0x2e
 8003e74:	d10c      	bne.n	8003e90 <_svfiprintf_r+0x130>
 8003e76:	7863      	ldrb	r3, [r4, #1]
 8003e78:	2b2a      	cmp	r3, #42	; 0x2a
 8003e7a:	d135      	bne.n	8003ee8 <_svfiprintf_r+0x188>
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	3402      	adds	r4, #2
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9203      	str	r2, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfb8      	it	lt
 8003e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f5c <_svfiprintf_r+0x1fc>
 8003e94:	2203      	movs	r2, #3
 8003e96:	4650      	mov	r0, sl
 8003e98:	7821      	ldrb	r1, [r4, #0]
 8003e9a:	f000 f9f7 	bl	800428c <memchr>
 8003e9e:	b140      	cbz	r0, 8003eb2 <_svfiprintf_r+0x152>
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	eba0 000a 	sub.w	r0, r0, sl
 8003ea6:	fa03 f000 	lsl.w	r0, r3, r0
 8003eaa:	9b04      	ldr	r3, [sp, #16]
 8003eac:	3401      	adds	r4, #1
 8003eae:	4303      	orrs	r3, r0
 8003eb0:	9304      	str	r3, [sp, #16]
 8003eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb6:	2206      	movs	r2, #6
 8003eb8:	4825      	ldr	r0, [pc, #148]	; (8003f50 <_svfiprintf_r+0x1f0>)
 8003eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ebe:	f000 f9e5 	bl	800428c <memchr>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d038      	beq.n	8003f38 <_svfiprintf_r+0x1d8>
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <_svfiprintf_r+0x1f4>)
 8003ec8:	bb1b      	cbnz	r3, 8003f12 <_svfiprintf_r+0x1b2>
 8003eca:	9b03      	ldr	r3, [sp, #12]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	9303      	str	r3, [sp, #12]
 8003ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed8:	4433      	add	r3, r6
 8003eda:	9309      	str	r3, [sp, #36]	; 0x24
 8003edc:	e767      	b.n	8003dae <_svfiprintf_r+0x4e>
 8003ede:	460c      	mov	r4, r1
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ee6:	e7a5      	b.n	8003e34 <_svfiprintf_r+0xd4>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f04f 0c0a 	mov.w	ip, #10
 8003eee:	4619      	mov	r1, r3
 8003ef0:	3401      	adds	r4, #1
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003efa:	3a30      	subs	r2, #48	; 0x30
 8003efc:	2a09      	cmp	r2, #9
 8003efe:	d903      	bls.n	8003f08 <_svfiprintf_r+0x1a8>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0c5      	beq.n	8003e90 <_svfiprintf_r+0x130>
 8003f04:	9105      	str	r1, [sp, #20]
 8003f06:	e7c3      	b.n	8003e90 <_svfiprintf_r+0x130>
 8003f08:	4604      	mov	r4, r0
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f10:	e7f0      	b.n	8003ef4 <_svfiprintf_r+0x194>
 8003f12:	ab03      	add	r3, sp, #12
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	462a      	mov	r2, r5
 8003f18:	4638      	mov	r0, r7
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <_svfiprintf_r+0x1f8>)
 8003f1c:	a904      	add	r1, sp, #16
 8003f1e:	f3af 8000 	nop.w
 8003f22:	1c42      	adds	r2, r0, #1
 8003f24:	4606      	mov	r6, r0
 8003f26:	d1d6      	bne.n	8003ed6 <_svfiprintf_r+0x176>
 8003f28:	89ab      	ldrh	r3, [r5, #12]
 8003f2a:	065b      	lsls	r3, r3, #25
 8003f2c:	f53f af2c 	bmi.w	8003d88 <_svfiprintf_r+0x28>
 8003f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f32:	b01d      	add	sp, #116	; 0x74
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f38:	ab03      	add	r3, sp, #12
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4638      	mov	r0, r7
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <_svfiprintf_r+0x1f8>)
 8003f42:	a904      	add	r1, sp, #16
 8003f44:	f000 f87c 	bl	8004040 <_printf_i>
 8003f48:	e7eb      	b.n	8003f22 <_svfiprintf_r+0x1c2>
 8003f4a:	bf00      	nop
 8003f4c:	0800452c 	.word	0x0800452c
 8003f50:	08004536 	.word	0x08004536
 8003f54:	00000000 	.word	0x00000000
 8003f58:	08003ca9 	.word	0x08003ca9
 8003f5c:	08004532 	.word	0x08004532

08003f60 <_printf_common>:
 8003f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	4616      	mov	r6, r2
 8003f66:	4699      	mov	r9, r3
 8003f68:	688a      	ldr	r2, [r1, #8]
 8003f6a:	690b      	ldr	r3, [r1, #16]
 8003f6c:	4607      	mov	r7, r0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	bfb8      	it	lt
 8003f72:	4613      	movlt	r3, r2
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f80:	b10a      	cbz	r2, 8003f86 <_printf_common+0x26>
 8003f82:	3301      	adds	r3, #1
 8003f84:	6033      	str	r3, [r6, #0]
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	0699      	lsls	r1, r3, #26
 8003f8a:	bf42      	ittt	mi
 8003f8c:	6833      	ldrmi	r3, [r6, #0]
 8003f8e:	3302      	addmi	r3, #2
 8003f90:	6033      	strmi	r3, [r6, #0]
 8003f92:	6825      	ldr	r5, [r4, #0]
 8003f94:	f015 0506 	ands.w	r5, r5, #6
 8003f98:	d106      	bne.n	8003fa8 <_printf_common+0x48>
 8003f9a:	f104 0a19 	add.w	sl, r4, #25
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	6832      	ldr	r2, [r6, #0]
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	dc28      	bgt.n	8003ffa <_printf_common+0x9a>
 8003fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fac:	1e13      	subs	r3, r2, #0
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	bf18      	it	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	0692      	lsls	r2, r2, #26
 8003fb6:	d42d      	bmi.n	8004014 <_printf_common+0xb4>
 8003fb8:	4649      	mov	r1, r9
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d020      	beq.n	8004008 <_printf_common+0xa8>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	68e5      	ldr	r5, [r4, #12]
 8003fca:	f003 0306 	and.w	r3, r3, #6
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	bf18      	it	ne
 8003fd2:	2500      	movne	r5, #0
 8003fd4:	6832      	ldr	r2, [r6, #0]
 8003fd6:	f04f 0600 	mov.w	r6, #0
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	bf08      	it	eq
 8003fde:	1aad      	subeq	r5, r5, r2
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	bf08      	it	eq
 8003fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bfc4      	itt	gt
 8003fec:	1a9b      	subgt	r3, r3, r2
 8003fee:	18ed      	addgt	r5, r5, r3
 8003ff0:	341a      	adds	r4, #26
 8003ff2:	42b5      	cmp	r5, r6
 8003ff4:	d11a      	bne.n	800402c <_printf_common+0xcc>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e008      	b.n	800400c <_printf_common+0xac>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4652      	mov	r2, sl
 8003ffe:	4649      	mov	r1, r9
 8004000:	4638      	mov	r0, r7
 8004002:	47c0      	blx	r8
 8004004:	3001      	adds	r0, #1
 8004006:	d103      	bne.n	8004010 <_printf_common+0xb0>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	3501      	adds	r5, #1
 8004012:	e7c4      	b.n	8003f9e <_printf_common+0x3e>
 8004014:	2030      	movs	r0, #48	; 0x30
 8004016:	18e1      	adds	r1, r4, r3
 8004018:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004022:	4422      	add	r2, r4
 8004024:	3302      	adds	r3, #2
 8004026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800402a:	e7c5      	b.n	8003fb8 <_printf_common+0x58>
 800402c:	2301      	movs	r3, #1
 800402e:	4622      	mov	r2, r4
 8004030:	4649      	mov	r1, r9
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d0e6      	beq.n	8004008 <_printf_common+0xa8>
 800403a:	3601      	adds	r6, #1
 800403c:	e7d9      	b.n	8003ff2 <_printf_common+0x92>
	...

08004040 <_printf_i>:
 8004040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	7e27      	ldrb	r7, [r4, #24]
 8004048:	4691      	mov	r9, r2
 800404a:	2f78      	cmp	r7, #120	; 0x78
 800404c:	4680      	mov	r8, r0
 800404e:	469a      	mov	sl, r3
 8004050:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004056:	d807      	bhi.n	8004068 <_printf_i+0x28>
 8004058:	2f62      	cmp	r7, #98	; 0x62
 800405a:	d80a      	bhi.n	8004072 <_printf_i+0x32>
 800405c:	2f00      	cmp	r7, #0
 800405e:	f000 80d9 	beq.w	8004214 <_printf_i+0x1d4>
 8004062:	2f58      	cmp	r7, #88	; 0x58
 8004064:	f000 80a4 	beq.w	80041b0 <_printf_i+0x170>
 8004068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800406c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004070:	e03a      	b.n	80040e8 <_printf_i+0xa8>
 8004072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004076:	2b15      	cmp	r3, #21
 8004078:	d8f6      	bhi.n	8004068 <_printf_i+0x28>
 800407a:	a001      	add	r0, pc, #4	; (adr r0, 8004080 <_printf_i+0x40>)
 800407c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004080:	080040d9 	.word	0x080040d9
 8004084:	080040ed 	.word	0x080040ed
 8004088:	08004069 	.word	0x08004069
 800408c:	08004069 	.word	0x08004069
 8004090:	08004069 	.word	0x08004069
 8004094:	08004069 	.word	0x08004069
 8004098:	080040ed 	.word	0x080040ed
 800409c:	08004069 	.word	0x08004069
 80040a0:	08004069 	.word	0x08004069
 80040a4:	08004069 	.word	0x08004069
 80040a8:	08004069 	.word	0x08004069
 80040ac:	080041fb 	.word	0x080041fb
 80040b0:	0800411d 	.word	0x0800411d
 80040b4:	080041dd 	.word	0x080041dd
 80040b8:	08004069 	.word	0x08004069
 80040bc:	08004069 	.word	0x08004069
 80040c0:	0800421d 	.word	0x0800421d
 80040c4:	08004069 	.word	0x08004069
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004069 	.word	0x08004069
 80040d0:	08004069 	.word	0x08004069
 80040d4:	080041e5 	.word	0x080041e5
 80040d8:	680b      	ldr	r3, [r1, #0]
 80040da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	600a      	str	r2, [r1, #0]
 80040e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0a4      	b.n	8004236 <_printf_i+0x1f6>
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	6808      	ldr	r0, [r1, #0]
 80040f0:	062e      	lsls	r6, r5, #24
 80040f2:	f100 0304 	add.w	r3, r0, #4
 80040f6:	d50a      	bpl.n	800410e <_printf_i+0xce>
 80040f8:	6805      	ldr	r5, [r0, #0]
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	da03      	bge.n	8004108 <_printf_i+0xc8>
 8004100:	232d      	movs	r3, #45	; 0x2d
 8004102:	426d      	negs	r5, r5
 8004104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004108:	230a      	movs	r3, #10
 800410a:	485e      	ldr	r0, [pc, #376]	; (8004284 <_printf_i+0x244>)
 800410c:	e019      	b.n	8004142 <_printf_i+0x102>
 800410e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004112:	6805      	ldr	r5, [r0, #0]
 8004114:	600b      	str	r3, [r1, #0]
 8004116:	bf18      	it	ne
 8004118:	b22d      	sxthne	r5, r5
 800411a:	e7ef      	b.n	80040fc <_printf_i+0xbc>
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	1d18      	adds	r0, r3, #4
 8004122:	6008      	str	r0, [r1, #0]
 8004124:	0628      	lsls	r0, r5, #24
 8004126:	d501      	bpl.n	800412c <_printf_i+0xec>
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	e002      	b.n	8004132 <_printf_i+0xf2>
 800412c:	0669      	lsls	r1, r5, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0xe8>
 8004130:	881d      	ldrh	r5, [r3, #0]
 8004132:	2f6f      	cmp	r7, #111	; 0x6f
 8004134:	bf0c      	ite	eq
 8004136:	2308      	moveq	r3, #8
 8004138:	230a      	movne	r3, #10
 800413a:	4852      	ldr	r0, [pc, #328]	; (8004284 <_printf_i+0x244>)
 800413c:	2100      	movs	r1, #0
 800413e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004142:	6866      	ldr	r6, [r4, #4]
 8004144:	2e00      	cmp	r6, #0
 8004146:	bfa8      	it	ge
 8004148:	6821      	ldrge	r1, [r4, #0]
 800414a:	60a6      	str	r6, [r4, #8]
 800414c:	bfa4      	itt	ge
 800414e:	f021 0104 	bicge.w	r1, r1, #4
 8004152:	6021      	strge	r1, [r4, #0]
 8004154:	b90d      	cbnz	r5, 800415a <_printf_i+0x11a>
 8004156:	2e00      	cmp	r6, #0
 8004158:	d04d      	beq.n	80041f6 <_printf_i+0x1b6>
 800415a:	4616      	mov	r6, r2
 800415c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004160:	fb03 5711 	mls	r7, r3, r1, r5
 8004164:	5dc7      	ldrb	r7, [r0, r7]
 8004166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800416a:	462f      	mov	r7, r5
 800416c:	42bb      	cmp	r3, r7
 800416e:	460d      	mov	r5, r1
 8004170:	d9f4      	bls.n	800415c <_printf_i+0x11c>
 8004172:	2b08      	cmp	r3, #8
 8004174:	d10b      	bne.n	800418e <_printf_i+0x14e>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	07df      	lsls	r7, r3, #31
 800417a:	d508      	bpl.n	800418e <_printf_i+0x14e>
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	6861      	ldr	r1, [r4, #4]
 8004180:	4299      	cmp	r1, r3
 8004182:	bfde      	ittt	le
 8004184:	2330      	movle	r3, #48	; 0x30
 8004186:	f806 3c01 	strble.w	r3, [r6, #-1]
 800418a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800418e:	1b92      	subs	r2, r2, r6
 8004190:	6122      	str	r2, [r4, #16]
 8004192:	464b      	mov	r3, r9
 8004194:	4621      	mov	r1, r4
 8004196:	4640      	mov	r0, r8
 8004198:	f8cd a000 	str.w	sl, [sp]
 800419c:	aa03      	add	r2, sp, #12
 800419e:	f7ff fedf 	bl	8003f60 <_printf_common>
 80041a2:	3001      	adds	r0, #1
 80041a4:	d14c      	bne.n	8004240 <_printf_i+0x200>
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	b004      	add	sp, #16
 80041ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b0:	4834      	ldr	r0, [pc, #208]	; (8004284 <_printf_i+0x244>)
 80041b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041b6:	680e      	ldr	r6, [r1, #0]
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80041be:	061f      	lsls	r7, r3, #24
 80041c0:	600e      	str	r6, [r1, #0]
 80041c2:	d514      	bpl.n	80041ee <_printf_i+0x1ae>
 80041c4:	07d9      	lsls	r1, r3, #31
 80041c6:	bf44      	itt	mi
 80041c8:	f043 0320 	orrmi.w	r3, r3, #32
 80041cc:	6023      	strmi	r3, [r4, #0]
 80041ce:	b91d      	cbnz	r5, 80041d8 <_printf_i+0x198>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	2310      	movs	r3, #16
 80041da:	e7af      	b.n	800413c <_printf_i+0xfc>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f043 0320 	orr.w	r3, r3, #32
 80041e2:	6023      	str	r3, [r4, #0]
 80041e4:	2378      	movs	r3, #120	; 0x78
 80041e6:	4828      	ldr	r0, [pc, #160]	; (8004288 <_printf_i+0x248>)
 80041e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ec:	e7e3      	b.n	80041b6 <_printf_i+0x176>
 80041ee:	065e      	lsls	r6, r3, #25
 80041f0:	bf48      	it	mi
 80041f2:	b2ad      	uxthmi	r5, r5
 80041f4:	e7e6      	b.n	80041c4 <_printf_i+0x184>
 80041f6:	4616      	mov	r6, r2
 80041f8:	e7bb      	b.n	8004172 <_printf_i+0x132>
 80041fa:	680b      	ldr	r3, [r1, #0]
 80041fc:	6826      	ldr	r6, [r4, #0]
 80041fe:	1d1d      	adds	r5, r3, #4
 8004200:	6960      	ldr	r0, [r4, #20]
 8004202:	600d      	str	r5, [r1, #0]
 8004204:	0635      	lsls	r5, r6, #24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	d501      	bpl.n	800420e <_printf_i+0x1ce>
 800420a:	6018      	str	r0, [r3, #0]
 800420c:	e002      	b.n	8004214 <_printf_i+0x1d4>
 800420e:	0671      	lsls	r1, r6, #25
 8004210:	d5fb      	bpl.n	800420a <_printf_i+0x1ca>
 8004212:	8018      	strh	r0, [r3, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	4616      	mov	r6, r2
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	e7ba      	b.n	8004192 <_printf_i+0x152>
 800421c:	680b      	ldr	r3, [r1, #0]
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	600a      	str	r2, [r1, #0]
 8004222:	681e      	ldr	r6, [r3, #0]
 8004224:	2100      	movs	r1, #0
 8004226:	4630      	mov	r0, r6
 8004228:	6862      	ldr	r2, [r4, #4]
 800422a:	f000 f82f 	bl	800428c <memchr>
 800422e:	b108      	cbz	r0, 8004234 <_printf_i+0x1f4>
 8004230:	1b80      	subs	r0, r0, r6
 8004232:	6060      	str	r0, [r4, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	6123      	str	r3, [r4, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423e:	e7a8      	b.n	8004192 <_printf_i+0x152>
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	47d0      	blx	sl
 800424a:	3001      	adds	r0, #1
 800424c:	d0ab      	beq.n	80041a6 <_printf_i+0x166>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	079b      	lsls	r3, r3, #30
 8004252:	d413      	bmi.n	800427c <_printf_i+0x23c>
 8004254:	68e0      	ldr	r0, [r4, #12]
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	4298      	cmp	r0, r3
 800425a:	bfb8      	it	lt
 800425c:	4618      	movlt	r0, r3
 800425e:	e7a4      	b.n	80041aa <_printf_i+0x16a>
 8004260:	2301      	movs	r3, #1
 8004262:	4632      	mov	r2, r6
 8004264:	4649      	mov	r1, r9
 8004266:	4640      	mov	r0, r8
 8004268:	47d0      	blx	sl
 800426a:	3001      	adds	r0, #1
 800426c:	d09b      	beq.n	80041a6 <_printf_i+0x166>
 800426e:	3501      	adds	r5, #1
 8004270:	68e3      	ldr	r3, [r4, #12]
 8004272:	9903      	ldr	r1, [sp, #12]
 8004274:	1a5b      	subs	r3, r3, r1
 8004276:	42ab      	cmp	r3, r5
 8004278:	dcf2      	bgt.n	8004260 <_printf_i+0x220>
 800427a:	e7eb      	b.n	8004254 <_printf_i+0x214>
 800427c:	2500      	movs	r5, #0
 800427e:	f104 0619 	add.w	r6, r4, #25
 8004282:	e7f5      	b.n	8004270 <_printf_i+0x230>
 8004284:	0800453d 	.word	0x0800453d
 8004288:	0800454e 	.word	0x0800454e

0800428c <memchr>:
 800428c:	4603      	mov	r3, r0
 800428e:	b510      	push	{r4, lr}
 8004290:	b2c9      	uxtb	r1, r1
 8004292:	4402      	add	r2, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	4618      	mov	r0, r3
 8004298:	d101      	bne.n	800429e <memchr+0x12>
 800429a:	2000      	movs	r0, #0
 800429c:	e003      	b.n	80042a6 <memchr+0x1a>
 800429e:	7804      	ldrb	r4, [r0, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	428c      	cmp	r4, r1
 80042a4:	d1f6      	bne.n	8004294 <memchr+0x8>
 80042a6:	bd10      	pop	{r4, pc}

080042a8 <memcpy>:
 80042a8:	440a      	add	r2, r1
 80042aa:	4291      	cmp	r1, r2
 80042ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b0:	d100      	bne.n	80042b4 <memcpy+0xc>
 80042b2:	4770      	bx	lr
 80042b4:	b510      	push	{r4, lr}
 80042b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ba:	4291      	cmp	r1, r2
 80042bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c0:	d1f9      	bne.n	80042b6 <memcpy+0xe>
 80042c2:	bd10      	pop	{r4, pc}

080042c4 <memmove>:
 80042c4:	4288      	cmp	r0, r1
 80042c6:	b510      	push	{r4, lr}
 80042c8:	eb01 0402 	add.w	r4, r1, r2
 80042cc:	d902      	bls.n	80042d4 <memmove+0x10>
 80042ce:	4284      	cmp	r4, r0
 80042d0:	4623      	mov	r3, r4
 80042d2:	d807      	bhi.n	80042e4 <memmove+0x20>
 80042d4:	1e43      	subs	r3, r0, #1
 80042d6:	42a1      	cmp	r1, r4
 80042d8:	d008      	beq.n	80042ec <memmove+0x28>
 80042da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042e2:	e7f8      	b.n	80042d6 <memmove+0x12>
 80042e4:	4601      	mov	r1, r0
 80042e6:	4402      	add	r2, r0
 80042e8:	428a      	cmp	r2, r1
 80042ea:	d100      	bne.n	80042ee <memmove+0x2a>
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042f6:	e7f7      	b.n	80042e8 <memmove+0x24>

080042f8 <_free_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d043      	beq.n	8004388 <_free_r+0x90>
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f0c      	subs	r4, r1, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	18e4      	addlt	r4, r4, r3
 800430c:	f000 f8d0 	bl	80044b0 <__malloc_lock>
 8004310:	4a1e      	ldr	r2, [pc, #120]	; (800438c <_free_r+0x94>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	4610      	mov	r0, r2
 8004316:	b933      	cbnz	r3, 8004326 <_free_r+0x2e>
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	6014      	str	r4, [r2, #0]
 800431c:	4628      	mov	r0, r5
 800431e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004322:	f000 b8cb 	b.w	80044bc <__malloc_unlock>
 8004326:	42a3      	cmp	r3, r4
 8004328:	d90a      	bls.n	8004340 <_free_r+0x48>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	1862      	adds	r2, r4, r1
 800432e:	4293      	cmp	r3, r2
 8004330:	bf01      	itttt	eq
 8004332:	681a      	ldreq	r2, [r3, #0]
 8004334:	685b      	ldreq	r3, [r3, #4]
 8004336:	1852      	addeq	r2, r2, r1
 8004338:	6022      	streq	r2, [r4, #0]
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	6004      	str	r4, [r0, #0]
 800433e:	e7ed      	b.n	800431c <_free_r+0x24>
 8004340:	461a      	mov	r2, r3
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b10b      	cbz	r3, 800434a <_free_r+0x52>
 8004346:	42a3      	cmp	r3, r4
 8004348:	d9fa      	bls.n	8004340 <_free_r+0x48>
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	1850      	adds	r0, r2, r1
 800434e:	42a0      	cmp	r0, r4
 8004350:	d10b      	bne.n	800436a <_free_r+0x72>
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	4401      	add	r1, r0
 8004356:	1850      	adds	r0, r2, r1
 8004358:	4283      	cmp	r3, r0
 800435a:	6011      	str	r1, [r2, #0]
 800435c:	d1de      	bne.n	800431c <_free_r+0x24>
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4401      	add	r1, r0
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	e7d8      	b.n	800431c <_free_r+0x24>
 800436a:	d902      	bls.n	8004372 <_free_r+0x7a>
 800436c:	230c      	movs	r3, #12
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	e7d4      	b.n	800431c <_free_r+0x24>
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	1821      	adds	r1, r4, r0
 8004376:	428b      	cmp	r3, r1
 8004378:	bf01      	itttt	eq
 800437a:	6819      	ldreq	r1, [r3, #0]
 800437c:	685b      	ldreq	r3, [r3, #4]
 800437e:	1809      	addeq	r1, r1, r0
 8004380:	6021      	streq	r1, [r4, #0]
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	6054      	str	r4, [r2, #4]
 8004386:	e7c9      	b.n	800431c <_free_r+0x24>
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	bf00      	nop
 800438c:	200000ac 	.word	0x200000ac

08004390 <_malloc_r>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	1ccd      	adds	r5, r1, #3
 8004394:	f025 0503 	bic.w	r5, r5, #3
 8004398:	3508      	adds	r5, #8
 800439a:	2d0c      	cmp	r5, #12
 800439c:	bf38      	it	cc
 800439e:	250c      	movcc	r5, #12
 80043a0:	2d00      	cmp	r5, #0
 80043a2:	4606      	mov	r6, r0
 80043a4:	db01      	blt.n	80043aa <_malloc_r+0x1a>
 80043a6:	42a9      	cmp	r1, r5
 80043a8:	d903      	bls.n	80043b2 <_malloc_r+0x22>
 80043aa:	230c      	movs	r3, #12
 80043ac:	6033      	str	r3, [r6, #0]
 80043ae:	2000      	movs	r0, #0
 80043b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b2:	f000 f87d 	bl	80044b0 <__malloc_lock>
 80043b6:	4921      	ldr	r1, [pc, #132]	; (800443c <_malloc_r+0xac>)
 80043b8:	680a      	ldr	r2, [r1, #0]
 80043ba:	4614      	mov	r4, r2
 80043bc:	b99c      	cbnz	r4, 80043e6 <_malloc_r+0x56>
 80043be:	4f20      	ldr	r7, [pc, #128]	; (8004440 <_malloc_r+0xb0>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b923      	cbnz	r3, 80043ce <_malloc_r+0x3e>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4630      	mov	r0, r6
 80043c8:	f000 f862 	bl	8004490 <_sbrk_r>
 80043cc:	6038      	str	r0, [r7, #0]
 80043ce:	4629      	mov	r1, r5
 80043d0:	4630      	mov	r0, r6
 80043d2:	f000 f85d 	bl	8004490 <_sbrk_r>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d123      	bne.n	8004422 <_malloc_r+0x92>
 80043da:	230c      	movs	r3, #12
 80043dc:	4630      	mov	r0, r6
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	f000 f86c 	bl	80044bc <__malloc_unlock>
 80043e4:	e7e3      	b.n	80043ae <_malloc_r+0x1e>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	1b5b      	subs	r3, r3, r5
 80043ea:	d417      	bmi.n	800441c <_malloc_r+0x8c>
 80043ec:	2b0b      	cmp	r3, #11
 80043ee:	d903      	bls.n	80043f8 <_malloc_r+0x68>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	441c      	add	r4, r3
 80043f4:	6025      	str	r5, [r4, #0]
 80043f6:	e004      	b.n	8004402 <_malloc_r+0x72>
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	42a2      	cmp	r2, r4
 80043fc:	bf0c      	ite	eq
 80043fe:	600b      	streq	r3, [r1, #0]
 8004400:	6053      	strne	r3, [r2, #4]
 8004402:	4630      	mov	r0, r6
 8004404:	f000 f85a 	bl	80044bc <__malloc_unlock>
 8004408:	f104 000b 	add.w	r0, r4, #11
 800440c:	1d23      	adds	r3, r4, #4
 800440e:	f020 0007 	bic.w	r0, r0, #7
 8004412:	1ac2      	subs	r2, r0, r3
 8004414:	d0cc      	beq.n	80043b0 <_malloc_r+0x20>
 8004416:	1a1b      	subs	r3, r3, r0
 8004418:	50a3      	str	r3, [r4, r2]
 800441a:	e7c9      	b.n	80043b0 <_malloc_r+0x20>
 800441c:	4622      	mov	r2, r4
 800441e:	6864      	ldr	r4, [r4, #4]
 8004420:	e7cc      	b.n	80043bc <_malloc_r+0x2c>
 8004422:	1cc4      	adds	r4, r0, #3
 8004424:	f024 0403 	bic.w	r4, r4, #3
 8004428:	42a0      	cmp	r0, r4
 800442a:	d0e3      	beq.n	80043f4 <_malloc_r+0x64>
 800442c:	1a21      	subs	r1, r4, r0
 800442e:	4630      	mov	r0, r6
 8004430:	f000 f82e 	bl	8004490 <_sbrk_r>
 8004434:	3001      	adds	r0, #1
 8004436:	d1dd      	bne.n	80043f4 <_malloc_r+0x64>
 8004438:	e7cf      	b.n	80043da <_malloc_r+0x4a>
 800443a:	bf00      	nop
 800443c:	200000ac 	.word	0x200000ac
 8004440:	200000b0 	.word	0x200000b0

08004444 <_realloc_r>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	4607      	mov	r7, r0
 8004448:	4614      	mov	r4, r2
 800444a:	460e      	mov	r6, r1
 800444c:	b921      	cbnz	r1, 8004458 <_realloc_r+0x14>
 800444e:	4611      	mov	r1, r2
 8004450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004454:	f7ff bf9c 	b.w	8004390 <_malloc_r>
 8004458:	b922      	cbnz	r2, 8004464 <_realloc_r+0x20>
 800445a:	f7ff ff4d 	bl	80042f8 <_free_r>
 800445e:	4625      	mov	r5, r4
 8004460:	4628      	mov	r0, r5
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004464:	f000 f830 	bl	80044c8 <_malloc_usable_size_r>
 8004468:	42a0      	cmp	r0, r4
 800446a:	d20f      	bcs.n	800448c <_realloc_r+0x48>
 800446c:	4621      	mov	r1, r4
 800446e:	4638      	mov	r0, r7
 8004470:	f7ff ff8e 	bl	8004390 <_malloc_r>
 8004474:	4605      	mov	r5, r0
 8004476:	2800      	cmp	r0, #0
 8004478:	d0f2      	beq.n	8004460 <_realloc_r+0x1c>
 800447a:	4631      	mov	r1, r6
 800447c:	4622      	mov	r2, r4
 800447e:	f7ff ff13 	bl	80042a8 <memcpy>
 8004482:	4631      	mov	r1, r6
 8004484:	4638      	mov	r0, r7
 8004486:	f7ff ff37 	bl	80042f8 <_free_r>
 800448a:	e7e9      	b.n	8004460 <_realloc_r+0x1c>
 800448c:	4635      	mov	r5, r6
 800448e:	e7e7      	b.n	8004460 <_realloc_r+0x1c>

08004490 <_sbrk_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	2300      	movs	r3, #0
 8004494:	4d05      	ldr	r5, [pc, #20]	; (80044ac <_sbrk_r+0x1c>)
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	f7fc fa34 	bl	8000908 <_sbrk>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_sbrk_r+0x1a>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_sbrk_r+0x1a>
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	200001d4 	.word	0x200001d4

080044b0 <__malloc_lock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__malloc_lock+0x8>)
 80044b2:	f000 b811 	b.w	80044d8 <__retarget_lock_acquire_recursive>
 80044b6:	bf00      	nop
 80044b8:	200001dc 	.word	0x200001dc

080044bc <__malloc_unlock>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__malloc_unlock+0x8>)
 80044be:	f000 b80c 	b.w	80044da <__retarget_lock_release_recursive>
 80044c2:	bf00      	nop
 80044c4:	200001dc 	.word	0x200001dc

080044c8 <_malloc_usable_size_r>:
 80044c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044cc:	1f18      	subs	r0, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bfbc      	itt	lt
 80044d2:	580b      	ldrlt	r3, [r1, r0]
 80044d4:	18c0      	addlt	r0, r0, r3
 80044d6:	4770      	bx	lr

080044d8 <__retarget_lock_acquire_recursive>:
 80044d8:	4770      	bx	lr

080044da <__retarget_lock_release_recursive>:
 80044da:	4770      	bx	lr

080044dc <_init>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr

080044e8 <_fini>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr
